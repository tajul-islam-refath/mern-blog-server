openapi: 3.0.0
info:
  version: 1.0.0
  title: Multi Author Blog Application API
  contact:
    name: Tajul Islam Refath
    email: tajul16-447@diu.edu.bd
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/TajulIslamRefath/test_api/1.0.0
  - url: http://localhost:8080/api/v1
    description: dev server
tags:
  - name: Auth
    description: "Authentication endpoint (Public)"
  - name: Article
    description: "Article endpoints (Public) + (Private)"
  - name: Comment
    description: "Comment endpoients (Private)"
  - name: User
    description: "User endpoients (Private) + (Public)"

paths:
  # auth
  "/auth/send-otp":
    post:
      description: "Send OTP by Email"
      tags: [Auth]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "example@gmail.com"
              required: [email]

      responses:
        "200":
          description: Return success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Ok
                  data:
                    type: object
                    properties:
                      email:
                        type: string
                        example: "email@gmail.gom"
                      hash:
                        type: string
                        example: "SKDnvkdsnvkadnkfbvkjdfan.omasofgnon"

        "400":
          $ref: "#/components/responses/400"
  "/auth/signup":
    post:
      description: "Create a new user"
      tags: [Auth]
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "refath"
                email:
                  type: string
                  format: email
                  example: "example@gmail.com"
                password:
                  type: string
                  format: password
                  example: "12345678"
                profileImage:
                  type: string
                  format: binary
              required: [username, email, password]
      responses:
        "200":
          description: Return success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Ok
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: "/auth/signup"
        "400":
          $ref: "#/components/responses/400"
  "/auth/signin":
    post:
      description: "Sign in user"
      tags: [Auth]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "example@gmail.com"
                password:
                  type: string
                  format: password
                  example: "12345678"
              required: [email, password]

      responses:
        "200":
          description: Return success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Ok
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: "/auth/login"
        "400":
          $ref: "#/components/responses/400"
  # article
  "/articles":
    get:
      # security:
      #   - bearerAuth: []
      tags: [Article]
      description: "Retrive all published articles"
      parameters:
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageLimit"

      responses:
        "200":
          description: "Return a list of articles"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Get all articles successfully"
                  data:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: string
                              example: "msvmosfons516damflvdnm"
                            title:
                              type: string
                              example: "Learn Python"
                            cover:
                              type: string
                              example: "https://example.com/img/2"
                            author:
                              $ref: "#/components/schemas/AuthorDTO"
                        - $ref: "#/components/schemas/Timestamp"
    post:
      security:
        - bearerAuth: []
      description: "Create a new article"
      tags: [Article]
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                cover:
                  type: string
                  format: binary
                title:
                  type: string
                  example: "A new article about swagger"
                body:
                  type: string
                  example: "Test article body"
                tags:
                  type: array
                  items:
                    type: string

              required: [cover, title, body]

      responses:
        "200":
          description: Return success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Ok
  "/articles/{id}":
    get:
      tags: [Article]
      description: "Get single article"
      parameters:
        - $ref: "#/components/parameters/idPathParam"

      responses:
        "200":
          description: "Success Response"
          content:
            application/json:
              schema:
                type: object
    delete:
      security:
        - bearerAuth: []
      tags: [Article]
      description: "Delete article"
      parameters:
        - $ref: "#/components/parameters/idPathParam"

      responses:
        "200":
          description: "Success Response"
          content:
            application/json:
              schema:
                type: object
  "/articles/author/self":
    get:
      security:
        - bearerAuth: []
      tags: [Article]
      description: "The endpoint will return a list of articles for self"
      parameters:
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageLimit"
        - $ref: "#/components/parameters/sortType"
      responses:
        "200":
          description: "Return a list of articles"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Get all articles successfully"
                  data:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: string
                              example: "msvmosfons516damflvdnm"
                            title:
                              type: string
                              example: "Learn Python"
                            cover:
                              type: string
                              example: "https://example.com/img/2"
                            author:
                              $ref: "#/components/schemas/AuthorDTO"
  # comment
  "/articles/{id}/comments":
    post:
      tags: [Comment]
      security:
        - bearerAuth: []
      description: Create a new comment
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                  example: First comment
      responses:
        "201":
          description: Successfully create a comment
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  code:
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: New comment added successfully
                  comment:
                    type: object
                    properties:
                      id:
                        type: string
                        example: kjnsdjfnksdnfkajdnsf1515sd
                      body:
                        type: string
                        example: First comment
                      user:
                        $ref: "#/components/schemas/AuthorDTO"
        "400":
          $ref: "#/components/responses/400"
        "500":
          $ref: "#/components/responses/500"
    get:
      tags: [Comment]
      security:
        - bearerAuth: []
      description: Get all comments for a single article
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      responses:
        "200":
          description: Successfully get all comments
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  code:
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: Get all comments successfully
                  comments:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: string
                              example: kjnsdjfnksdnfkajdnsf1515sd
                            body:
                              type: string
                              example: First comment
                            user:
                              $ref: "#/components/schemas/AuthorDTO"
        "400":
          $ref: "#/components/responses/400"
        "500":
          $ref: "#/components/responses/500"
  "/articles/{id}/comments/{commentId}":
    delete:
      tags: [Comment]
      security:
        - bearerAuth: []
      description: Get all comments for a single article
      parameters:
        - $ref: "#/components/parameters/idPathParam"
        - in: path
          name: commentId
          description: Comment ID
          required: true
          schema:
            type: string
            example: "64d268cdeef8c84bb18912db"
      responses:
        "200":
          description: Successfully delete comment
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  code:
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: Delete comment success
                  id:
                    type: string
                    example: kjnsdjfnksdnfkajdnsf1515sd

        "400":
          $ref: "#/components/responses/400"
        "500":
          $ref: "#/components/responses/500"

  # users
  "/users/self/profile":
    get:
      security:
        - bearerAuth: []
      tags: [User]
      description: "The endpoint will return self profile"
      responses:
        "200":
          description: "Return user profile"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Get user profile successfull"
                  data:
                    type: object
  "/users/{username}":
    get:
      tags: [User]
      description: "The endpoint will return user profile with articles"
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
            example: refath
      responses:
        "200":
          description: "Return user profile"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Get user profile successfull"
                  data:
                    type: object

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Timestamp:
      type: object
      properties:
        createdAt:
          type: string
        updatedAt:
          type: string
      required: [createdAt, updatedAt]
    AuthorDTO:
      type: object
      properties:
        id:
          type: string
          example: oefjawijfiojsdoi165sadndf
        name:
          type: string
          example: "Tajul Islam Refath"
        image:
          type: string
          example: "https://example.com/img/2"
  responses:
    "400":
      description: "Bad Request"
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 400
              message:
                type: string
                example: "Bad Request"
              errors:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      example: "email"
                    message:
                      type: string
                      example: "Invalid email"
    "500":
      description: "Server error"
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 500
              message:
                type: string
                example: "Internal server error"

  parameters:
    pageNumber:
      in: query
      name: page
      description: "Current page number"
      schema:
        type: integer
        example: 1
    pageLimit:
      in: query
      name: limit
      description: "Return maximum articles"
      schema:
        type: integer
    sortType:
      in: query
      name: sort_type
      description: "Sort type (asc or dsc)"
      schema:
        type: string
        enum: [asc, dsc]
    search:
      in: query
      name: search
      description: Search text
      schema:
        type: string
    idPathParam:
      in: path
      name: id
      description: id
      required: true
      schema:
        type: string
        example: "64d268cdeef8c84bb18912db"
